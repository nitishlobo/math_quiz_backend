# Trigger this workflow on every pull request
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  pull_request:

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_DATABASE_NAME: "math_quiz"

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run linting
        uses: chartboost/ruff-action@v1

  run-tests:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker Hub PostgreSQL image
        image: postgres
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DATABASE_NAME }}
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements/test.txt

      - name: Run tests
        env:
          DATABASE_TYPE: postgresql
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: ${{ env.POSTGRES_DATABASE_NAME }}
          DEBUG_DATABASE: False
          DEBUG_TEST_DATABASE: False
        run: |
          source .venv/bin/activate
          pytest

  test-coverage:
    name: Test coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements/test.txt

      - name: Build coverage file
        run: |
          source .venv/bin/activate
          pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=app tests/ | tee pytest-coverage.txt

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          title: Repository coverage
          badge-title: Test coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          unique-id-for-comment: python3.8
          junitxml-path: ./pytest.xml
          junitxml-title: Python Coverage Summary

      - name: Check the output coverage
        run: |
          echo "Coverage Percantage - ${{ steps.coverageComment.outputs.coverage }}"
          echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
          echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"
          echo "Summary Report - ${{ steps.coverageComment.outputs.summaryReport }}"

          echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"

          echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
          echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
          echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
          echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
          echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"
          echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"
